import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

export interface WorkoutNotification {
  id: string;
  classId: string;
  classTitle: string;
  gymName: string;
  startTime: Date;
  notificationTime: Date;
  type: '1hour' | '2hours';
}

class NotificationService {
  private static instance: NotificationService;
  private isInitialized = false;

  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  async initialize(): Promise<boolean> {
    if (this.isInitialized) return true;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (!Device.isDevice) {
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
        return false;
      }

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      if (finalStatus !== 'granted') {
        console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º push token (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
      if (Platform.OS === 'android') {
        await Notifications.setNotificationChannelAsync('workout-reminders', {
          name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö',
          importance: Notifications.AndroidImportance.HIGH,
          vibrationPattern: [0, 250, 250, 250],
          lightColor: '#FF6246',
        });
      }

      this.isInitialized = true;
      console.log('‚úÖ NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NotificationService:', error);
      return false;
    }
  }

  async scheduleWorkoutReminders(workout: {
    classId: string;
    classTitle: string;
    gymName: string;
    startTime: Date;
  }): Promise<WorkoutNotification[]> {
    if (!this.isInitialized) {
      const initialized = await this.initialize();
      if (!initialized) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      }
    }

    const notifications: WorkoutNotification[] = [];
    const now = new Date();
    
    console.log('üì± Scheduling notifications for workout:', {
      classTitle: workout.classTitle,
      startTime: workout.startTime.toISOString(),
      localStartTime: workout.startTime.toLocaleString('ru-RU'),
      now: now.toISOString(),
      localNow: now.toLocaleString('ru-RU'),
      timeUntilStart: Math.floor((workout.startTime.getTime() - now.getTime()) / (1000 * 60)) + ' –º–∏–Ω—É—Ç'
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
    const twoHoursBefore = new Date(workout.startTime.getTime() - 2 * 60 * 60 * 1000);
    console.log('üì± 2-hour notification timing:', {
      twoHoursBefore: twoHoursBefore.toISOString(),
      localTwoHoursBefore: twoHoursBefore.toLocaleString('ru-RU'),
      willSchedule: twoHoursBefore > now,
      minutesUntilNotification: Math.floor((twoHoursBefore.getTime() - now.getTime()) / (1000 * 60))
    });
    
    if (twoHoursBefore > now) {
      const notificationId = await this.scheduleNotification({
        title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞! üí™',
        body: `${workout.classTitle} –≤ ${workout.gymName}`,
        data: {
          classId: workout.classId,
          type: '2hours',
          startTime: workout.startTime.toISOString(),
        },
        trigger: {
          date: twoHoursBefore,
        },
      });

      if (notificationId) {
        notifications.push({
          id: notificationId,
          classId: workout.classId,
          classTitle: workout.classTitle,
          gymName: workout.gymName,
          startTime: workout.startTime,
          notificationTime: twoHoursBefore,
          type: '2hours',
        });
      }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å
    const oneHourBefore = new Date(workout.startTime.getTime() - 1 * 60 * 60 * 1000);
    console.log('üì± 1-hour notification timing:', {
      oneHourBefore: oneHourBefore.toISOString(),
      localOneHourBefore: oneHourBefore.toLocaleString('ru-RU'),
      willSchedule: oneHourBefore > now,
      minutesUntilNotification: Math.floor((oneHourBefore.getTime() - now.getTime()) / (1000 * 60))
    });
    
    if (oneHourBefore > now) {
      const notificationId = await this.scheduleNotification({
        title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å! ‚è∞',
        body: `${workout.classTitle} –≤ ${workout.gymName}`,
        data: {
          classId: workout.classId,
          type: '1hour',
          startTime: workout.startTime.toISOString(),
        },
        trigger: {
          date: oneHourBefore,
        },
      });

      if (notificationId) {
        notifications.push({
          id: notificationId,
          classId: workout.classId,
          classTitle: workout.classTitle,
          gymName: workout.gymName,
          startTime: workout.startTime,
          notificationTime: oneHourBefore,
          type: '1hour',
        });
      }
    }

    console.log(`üì± –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ "${workout.classTitle}"`);
    return notifications;
  }

  private async scheduleNotification(notification: {
    title: string;
    body: string;
    data: any;
    trigger: any;
  }): Promise<string | null> {
    try {
      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title: notification.title,
          body: notification.body,
          data: notification.data,
          sound: 'default',
        },
        trigger: notification.trigger,
      });

      return notificationId;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return null;
    }
  }

  async cancelWorkoutReminders(classId: string): Promise<void> {
    try {
      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      
      const notificationsToCancel = scheduledNotifications.filter(
        notification => notification.content.data?.classId === classId
      );

      for (const notification of notificationsToCancel) {
        await Notifications.cancelScheduledNotificationAsync(notification.identifier);
      }

      console.log(`üì± –û—Ç–º–µ–Ω–µ–Ω–æ ${notificationsToCancel.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–Ω—è—Ç–∏—è ${classId}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  async cancelAllNotifications(): Promise<void> {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync();
      console.log('üì± –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  async getScheduledNotifications(): Promise<Notifications.NotificationRequest[]> {
    try {
      return await Notifications.getAllScheduledNotificationsAsync();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }

  async getNotificationPermissions(): Promise<Notifications.NotificationPermissionsStatus> {
    return await Notifications.getPermissionsAsync();
  }

  async requestNotificationPermissions(): Promise<Notifications.NotificationPermissionsStatus> {
    return await Notifications.requestPermissionsAsync();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const notificationService = NotificationService.getInstance();

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useNotifications = () => {
  return {
    scheduleWorkoutReminders: (workout: Parameters<typeof notificationService.scheduleWorkoutReminders>[0]) =>
      notificationService.scheduleWorkoutReminders(workout),
    cancelWorkoutReminders: (classId: string) =>
      notificationService.cancelWorkoutReminders(classId),
    cancelAllNotifications: () =>
      notificationService.cancelAllNotifications(),
    getScheduledNotifications: () =>
      notificationService.getScheduledNotifications(),
    getNotificationPermissions: () =>
      notificationService.getNotificationPermissions(),
    requestNotificationPermissions: () =>
      notificationService.requestNotificationPermissions(),
    initialize: () =>
      notificationService.initialize(),
  };
};
